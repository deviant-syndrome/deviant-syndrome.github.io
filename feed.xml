<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deviant Syndrome</title>
    <description>coding, multimedia, gamedev, engineering</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 28 May 2023 11:18:21 +0300</pubDate>
    <lastBuildDate>Sun, 28 May 2023 11:18:21 +0300</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>Live Bounce Recording Using Terminal</title>
        <description>&lt;h4 id=&quot;icebreaker&quot;&gt;Icebreaker&lt;/h4&gt;
&lt;p&gt;My obsession with using found sounds in my recording, often gives me a sudden itch to bounce a few seconds of audio output from a random application on my computer. 
Say, a web application or a video player.&lt;/p&gt;

&lt;p&gt;And then I really feel, how cumbersome and inflated it is to start a general purpose DAW for that, and crawl through an 
awkward ritual of gently rubbing its multichannel mixer and transport controls for that. It is the same as 
summoning a 12 feet tall four-horned purple demon to open a can of beans for you.&lt;/p&gt;

&lt;p&gt;There are of course lightweight open source wave editors, like &lt;a href=&quot;https://www.audacityteam.org/&quot;&gt;Audacity&lt;/a&gt;.&lt;br /&gt;
Sadly, previous versions of it had some problems with recording “virtual” audio outputs akin to &lt;a href=&quot;https://existential.audio/blackhole/&quot;&gt;BlackHole 16ch&lt;/a&gt;, 
I’m currently using.&lt;/p&gt;

&lt;p&gt;Seems to be working correctly from version 3.2.5 onwards, though. Till this version was published I had plenty of free time to develop my own crappy solution
for yet another purposely invented problem. But this is how you mine proper tech-blog material, isn’t it? So, let’s go!&lt;/p&gt;

&lt;h4 id=&quot;the-ingredients&quot;&gt;The Ingredients&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sox.sourceforge.net/&quot;&gt;SoX&lt;/a&gt; - swiss army knife for DSP via terminal, as it is nominated by its developers. And, oh boy, indeed it is.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ffmpeg.org/ffplay.html&quot;&gt;ffplay&lt;/a&gt; - a part of FFmpeg audio suite, and it is a very simple portable media player using the FFmpeg libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-magic&quot;&gt;The Magic&lt;/h4&gt;

&lt;p&gt;UNIX-like terminal command piping using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; operator. Pipe operator placed between two commands simply tells the shell,
that first commands input becomes second command output. This thing combined with another UNIX paradigm called &lt;a href=&quot;https://en.wikipedia.org/wiki/Redirect_(computing)&quot;&gt;IO Redirect&lt;/a&gt;
is what really unlocks that “shell magic” at the reach of your fingertips (unless half of them had forever ingrown into
that horrible bio-prosthetic named after a small rodent species). So the commands for bouncing live output to a file are the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sox &lt;span class=&quot;nt&quot;&gt;-V6&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; coreaudio &lt;span class=&quot;s2&quot;&gt;&quot;BlackHole 16ch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; wav - | ffplay -
sox &lt;span class=&quot;nt&quot;&gt;-V6&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; coreaudio &lt;span class=&quot;s2&quot;&gt;&quot;BlackHole 16ch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; wav output.wav
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, I provided two very similar commands here. Indeed, I use the same source for both of them, which is my 
virtual input device. 
First command just redirects the output of my virtual device to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffplay&lt;/code&gt;. This solves the recording monitoring problem. 
Next one actually does the recording of audio to disk. 
Monitoring pipeline sometimes fails, while recording is stable, so I would recommend to run it in separate terminal 
sessions.&lt;/p&gt;

&lt;h4 id=&quot;but-wait-there-is-more&quot;&gt;But wait, there is more!&lt;/h4&gt;

&lt;p&gt;Albeit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sox&lt;/code&gt; does not look all that “user-friendly”, it can be much smarter than trivial methods of live record bouncing. Especially, when it comes to trimming silence.
Let’s consider the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sox &lt;span class=&quot;nt&quot;&gt;-V6&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; coreaudio &lt;span class=&quot;s2&quot;&gt;&quot;BlackHole 16ch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; wav output.wav silence 1 0.1 1% 1 0.5 1%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command will record audio from my virtual device, and trim silence from the beginning and the end of the recording. Technically, this applies “silence” effect as a part the internal FX chain of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sox&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s break down the parameters a bit:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parameter&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1 0.1 1%&lt;/td&gt;
      &lt;td&gt;Detects silence segments that are at least 1 second long, with a silence threshold of 0.1 (10% of maximum volume).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1 0.5 1%&lt;/td&gt;
      &lt;td&gt;Removes silence segments that are at least 1 second long, with a silence threshold of 0.5 (50% of maximum volume).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can read more about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sox&lt;/code&gt; silence effect &lt;a href=&quot;https://sox.sourceforge.io/sox.html#EFFECTS&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When bouncing live audio, you would probably want some safeguard to prevent overwriting existing files. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sox&lt;/code&gt; does not have a built-in solution for that, but you can easily write a small shell script to do that for you. Here is a small example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;wildcard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1

&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wildcard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/\*/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$counter&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;break
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;counter++&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then you can use it like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;output_filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;./find_next_file.sh &lt;span class=&quot;s2&quot;&gt;&quot;output*.wav&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
sox &lt;span class=&quot;nt&quot;&gt;-V6&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; coreaudio &lt;span class=&quot;s2&quot;&gt;&quot;BlackHole 16ch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; wav &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$output_filename&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- readmore --&gt;

&lt;h4 id=&quot;additional-notes&quot;&gt;Additional Notes&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sox&lt;/code&gt; will record all the available input channels of your device into a single file. In my case it is 16 channels. How often do you deal with 16-channel WAV files? I was personally quite surprised that standard WAVEs support more than 2 channels. Indeed, it was a relatively recent addition to the standard.
The WAVE format began supporting more than two channels with the introduction of the WAVE Format Extensible (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WAVEFORMATEXTENSIBLE&lt;/code&gt;) specification.&lt;/p&gt;

&lt;p&gt;This specification was introduced as part of the DirectX Media Objects (DMO) architecture, which was included with DirectX 8.0, released by Microsoft in 2000.
It is worth noting, that this specification was most likely designed to support spatial audio, and not multi-track recording.&lt;/p&gt;

&lt;p&gt;However, the spatilisation mapping is not a part of the WAVE specification, and is defined by the application. There are several different spatialisation schemes, and they are not compatible with each other. So, the exact spatialisation you get will depend of the software.&lt;/p&gt;

&lt;p&gt;I was wondering, why this problem was not addressed by the BWF convention, which adds broadcasting-specific metadata to the WAVE format, such as timecodes and project information. Probably, because BWF was introduced in 1997, three years prior to the WAVEFORMATEXTENSIBLE specification.&lt;/p&gt;

&lt;p&gt;It is a bit of a shame, because it would be a perfect place to store the channel mapping information. However, there is a &lt;a href=&quot;https://tech.ebu.ch/docs/tech/tech3285.pdf&quot;&gt;proposal&lt;/a&gt; and also, a &lt;a href=&quot;https://tech.ebu.ch/docs/r/r111.pdf&quot;&gt;recommendation&lt;/a&gt; to extend the BWF specification to support multi-channel audio. It is not a part of the official BWF specification yet, but it is already supported by some software, like &lt;a href=&quot;https://www.sounddevices.com/wave-agent&quot;&gt;Sound Devices Wave Agent&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Max MSP is a very powerful tool for audio processing, and it can be used for live audio recording as well. However, it is not a lightweight solution for that by any means, despite it does not have the overhead of conventional linear multi-track audio edtitor. For bouncing live audio using Max there is a very convenient  &lt;a href=&quot;https://docs.cycling74.com/max5/refpages/msp-ref/sfrecord~.html&quot;&gt;~sfrecord&lt;/a&gt; object.&lt;/p&gt;

&lt;p&gt;Seems like this &lt;a href=&quot;https://madskjeldgaard.dk/posts/sox-tutorial-cli-tape-music/#:~:text=SoX%20includes%20a%20very%20handy,c%20in%20the%20terminal%20window.&quot;&gt;tech-blog&lt;/a&gt; does a much better job at breaking down the capabilities of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sox&lt;/code&gt; than me.&lt;/p&gt;
</description>
        <pubDate>Sat, 13 May 2023 12:05:05 +0300</pubDate>
        <link>/2023/Live_Bounce_Recording_Using_Terminal/</link>
        <guid isPermaLink="true">/2023/Live_Bounce_Recording_Using_Terminal/</guid>
        
        <category>bash</category>
        
        <category>dsp</category>
        
        
        <category>vst audio software</category>
        
      </item>
    
      <item>
        <title>Docker Audio Hell Pt. 2</title>
        <description>&lt;h4 id=&quot;false-promises-of-posix-compatibility&quot;&gt;False Promises of POSIX-compatibility&lt;/h4&gt;

&lt;p&gt;In &lt;a href=&quot;/2022/Docker_Audio_Hell/&quot;&gt;previous article&lt;/a&gt; we briefly touched upon evolution of audio playback and processing under Unix-like operating system. That was quite a ride, if you remember. Maintaining traditions firmly set in this blog, let’s ask ourselves a question, how can we make my experience with *NIX audio even more pathological. Any suggestions? Right! Let’s run it in Docker under MacOS.&lt;/p&gt;

&lt;p&gt;Ok. Let’s first politely (for the most part) dismiss the obvious suggestions from the sane-minded people. This would be sure mixed with some old-man’s rumbling touching the peculiarity of his ill habits.
Q: Why not just install Wine on your host system? 
A: Being a mentally challenged paranoid I am, I have to state that I\m simply afraid. As of now, MacOS has completely dropped 32-bit support, the instructions of building and setting up Wine on those kind of systems looks like for building a portal to Hell. I’m not sure if I’m ready for that yet.&lt;/p&gt;

&lt;p&gt;Q: Why not use a proper HyperVisor, instead of crippled Docker, which was not designed for those kinds of shenanigans anyway?
A: Two point here. First, I simply do not want to install another piece of heavyweight software on my laptop (which is, technically, not even mine). Haven’t I already have this Docker thing lying around and my dayjob makes me interact with it a lot. So why not utilise it for something useful? (depends, on how one defines “useful”, of course)&lt;/p&gt;

&lt;p&gt;Q: What’s the use of some old Win32 application?  It does not fit the modern audio production standards at all. 
A: That’s just how I roll, sir/ma’m&lt;/p&gt;

&lt;p&gt;On normal Unix-like systems, the host’s sound (and MIDI) hardware could be simply shared via plain docker device mountpoint, like:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# x11docker provides this setup with option --alsa.&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--device&lt;/span&gt; /dev/snd ALSAIMAGE speaker-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, on our beloved slick 2+K$ tinfoil cans, we are going into…&lt;/p&gt;

&lt;!-- readmore --&gt;

&lt;h4 id=&quot;hoops-of-hellfire-and-blades&quot;&gt;Hoops of Hellfire and Blades&lt;/h4&gt;

&lt;p&gt;As an alternatively-abled, alternative OS (MacOS X) user, I do not have this luxury. The solution proposed, was to actually utilise pulseaudio native audio-over-the-network support. As I described earlier, conceptually it works, but I spotted two problems with that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Some strange latency issues, latency increases over time, and requires me to periodically restart the server on my host OS.&lt;/li&gt;
  &lt;li&gt;My version of pulseaudio, obtained from Homebrew (I believe), does not allow me to output to a virtual device (in my case, BlackHole 16ch)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seems, like the problem here is no particular device being virtual, but rather PulseAudio failing at creating sink name. See https://www.freedesktop.org/wiki/Software/PulseAudio/Documentation/User/SupportedAudioFormats/ . I could try to debug this, however, my attempts at building latest pulseaudio could be compared to monkey trying to land a fighter jet (no offence to the monkeys, through, I managed to build it, but then it failed to start, stating that my alternative OS semaphores are not POSIX compatible).&lt;/p&gt;

&lt;details&gt;
  &lt;summary&gt;MacOS PulseAudio Server Logs
&lt;/summary&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I: [] module-coreaudio-device.c: Initializing module for CoreAudio device 'BlackHole 16ch' (id 52)
I: [] module-card-restore.c: Restoring port latency offsets for card BlackHole_16ch.
D: [] card.c: Looking for initial profile for card BlackHole_16ch
D: [] card.c: on availability unknown
I: [] card.c: BlackHole_16ch: active_profile: on
I: [] card.c: Created 0 &quot;BlackHole_16ch&quot;
D: [] module-coreaudio-device.c: Sample rate: 44100.000000
D: [] module-coreaudio-device.c: 64 bytes per packet
D: [] module-coreaudio-device.c: 1 frames per packet
D: [] module-coreaudio-device.c: 64 bytes per frame
D: [] module-coreaudio-device.c: 16 channels per frame
D: [] module-coreaudio-device.c: 32 bits per channel
D: [] module-coreaudio-device.c: Stream name is &amp;gt;Channel 1, Channel 2, Channel 3, Channel 4, Channel 5, Channel 6, Channel 7, Channel 8, Channel 9, Channel 10, Channel 11, Channel 12, Channel 13, Channel 14, Channel 15, Channel 16&amp;lt;
D: [] module-device-restore.c: Database contains no data for key: sink:Channel_1__Channel_2__Channel_3__Channel_4__Channel_5__Channel_6__Channel_7__Channel_8__Channel_9__Channel_10__Channel_11__Chann
D: [] module-device-restore.c: Database contains no (or invalid) data for key: sink:Channel_1__Channel_2__Channel_3__Channel_4__Channel_5__Channel_6__Channel_7__Channel_8__Channel_9__Channel_10__Channel_11__Chann:null
I: [] sink.c: Created sink 0 &quot;Channel_1__Channel_2__Channel_3__Channel_4__Channel_5__Channel_6__Channel_7__Channel_8__Channel_9__Channel_10__Channel_11__Chann&quot; with sample spec float32le 16ch 44100Hz and channel map mono,mono,mono,mono,mono,mono,mono,mono,mono,mono,mono,mono,mono,mono,mono,mono
I: [] sink.c:     device.string = &quot;BlackHole 16ch&quot;
I: [] sink.c:     device.product.name = &quot;BlackHole 16ch&quot;
I: [] sink.c:     device.description = &quot;BlackHole 16ch&quot;
I: [] sink.c:     device.access_mode = &quot;mmap&quot;
I: [] sink.c:     device.class = &quot;sound&quot;
I: [] sink.c:     device.api = &quot;CoreAudio&quot;
I: [] sink.c:     device.buffering.buffer_size = &quot;32768&quot;
I: [] sink.c:     device.vendor.name = &quot;Existential Audio Inc.&quot;
I: [] sink.c:     device.icon_name = &quot;audio-card&quot;
D: [] source.c: Failed to register name Channel_1__Channel_2__Channel_3__Channel_4__Channel_5__Channel_6__Channel_7__Channel_8__Channel_9__Channel_10__Channel_11__Chann.monitor.
I: [] sink.c: Freeing sink 0 &quot;Channel_1__Channel_2__Channel_3__Channel_4__Channel_5__Channel_6__Channel_7__Channel_8__Channel_9__Channel_10__Channel_11__Chann&quot;
E: [] module-coreaudio-device.c: unable to create sink.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/details&gt;

&lt;p&gt;Those couple of issues mentioned above, of course, make recording the container’s audio output comparable to jumping through the hoops of hellfire and blades every tine. So, instead of that, I decided to use 
OulseAudio RTP sink support, which could be defined like that (on the host system):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pulseaudio &lt;span class=&quot;nt&quot;&gt;--load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;module-native-protocol-tcp &lt;span class=&quot;nt&quot;&gt;--exit-idle-time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vvvvv&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# since we did not daemonize the serivce, the commands below can be executed in a separate terminal window&lt;/span&gt;
pacmd load-module module-null-sink &lt;span class=&quot;nv&quot;&gt;sink_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rtp
pacmd load-module module-rtp-send &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rtp.monitor &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234 &lt;span class=&quot;nv&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Real-time_Transport_Protocol&quot;&gt;RTP protocol&lt;/a&gt; can work in two modes, standard single-cast and (multi-cast)[https://en.wikipedia.org/wiki/Real-time_Transport_Protocol]. So, if use define a sink with default options, . And unfortunately, you would never guess, what would be the mutkcast address, you’ll have to probe it manually, or grep pulseaudio logs. And this option only accetps single IP or multi-cast range, no hostname resolve supported. So, the “docker.io” tricks would not work here (the phrase “would not work” could be the most frequent word combination of this blog, need to check for that one day).&lt;/p&gt;

&lt;p&gt;By the way, you can check the UDP communication between docker container and host using netcat.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# inside the container&lt;/span&gt;
nc &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &amp;lt;HOST_IP&amp;gt; 1234

&lt;span class=&quot;c&quot;&gt;# on host machine&lt;/span&gt;
nc &lt;span class=&quot;nt&quot;&gt;-ul&lt;/span&gt; 1234 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we are also have to do some exotic magic to simply obtain the host’s IP on the Docker network. Our life would be too easy and dull without that, wouldn’t it?&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# either an arbitrary IPv4 address from host&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Hostip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;ip &lt;span class=&quot;nt&quot;&gt;-4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; a | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $4}'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;/ &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 127.0.0.1 | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# or especially IP from docker daemon&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Hostip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;ip &lt;span class=&quot;nt&quot;&gt;-4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; a| &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;docker0 | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $4}'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;/ &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then why not simply define a loop back address and a free UDP port, by convention for RTP it’s 1234 (RTP usually uses UDP as a transport). Then we could simply forward this port from guest to host. Well, shocking news, ladies ang gentelmen, 
in Docker world, ports are forwared &lt;em&gt;from host to container&lt;/em&gt;, not the other way around. So, if you are into that kind of naughty stuff, you\ll have to use dockers’s –network=host option. So, then you can determine the host’s IP and speicify it in the config. (Hack me gently with a chainsaw, but I do not remember, why loopback did not work in this case).&lt;/p&gt;

&lt;h4 id=&quot;6inks-6inks-6inks&quot;&gt;6inks, 6inks, 6inks&lt;/h4&gt;

&lt;p&gt;Aaaaaand, it works. Well, sort of. I was able to pass my audio to the &lt;em&gt;other side&lt;/em&gt;. It was accompanied by a constant wall of digital noise, though. 
When I try to stream raw PCM audio using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faplay&lt;/code&gt;, for example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffplay  &lt;span class=&quot;nt&quot;&gt;-sample_rate&lt;/span&gt; 44100 &lt;span class=&quot;nt&quot;&gt;-autoexit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; s16be rtp://127.0.0.1:1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When I try to do the same, with, say, VLC player, it tries to interpret the data stream as some interleaved AV, and outputs all kind of glitchy weirdess in the video window.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vlc &lt;span class=&quot;nt&quot;&gt;--demux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rawaud &lt;span class=&quot;nt&quot;&gt;--rawaud-channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nt&quot;&gt;--rawaud-samplerate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;44100 udp://@:1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, I thought it was raw audio byte format problem, judging by the logs the defaul format is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s16be&lt;/code&gt; (16 bit big-endian). Just to get gist of the lunacy factor, you can take a tour of audio byte format zoo &lt;a href=&quot;https://www.freedesktop.org/wiki/Software/PulseAudio/Documentation/User/SupportedAudioFormats/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, I made sure they are matching and it left me with nothing but two more flavoirs of digital audio pollution. Well, it’s time to reveal you the brutal truth. Pulseaudio RTP sinks are &lt;em&gt;multi-cast only&lt;/em&gt;. So, when you specify a single IP address and port there, it dumps all the it’s sister RTP Control Stuff (stats, metadata and heartbeats) right above the raw audio, manifestating itself in a form a constant audiable noise.&lt;/p&gt;

&lt;p&gt;So, I swithed to multicast, and now now I’m able to get the audio output from Docker container to my virtual device for recording. 
The latency is still there of course. Thankfully, I’m not obligated to perform live with this kind of setup.&lt;/p&gt;

&lt;h4 id=&quot;i-might-still-be-insane-though&quot;&gt;I might still be insane, though&lt;/h4&gt;

&lt;p&gt;PulseAudio has native mechanism for capturing audio. The monitor sink is created the similar way, and then, allegedly, you can pipe it anywhere.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pactl load-module module-null-sink &lt;span class=&quot;nv&quot;&gt;sink_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;steam
parec &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; steam.monitor | oggenc &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 192 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; steam.ogg &lt;span class=&quot;nt&quot;&gt;--raw&lt;/span&gt; - 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oggenc&lt;/code&gt; is just for example here. Raw stream can be encoded into anything. The thing I have not tested yet, is would the standard output still be available, as recording without monitoring is not fun at all. Trust me, I used to do that.&lt;/p&gt;

</description>
        <pubDate>Sun, 21 Aug 2022 17:26:57 +0300</pubDate>
        <link>/2022/Docker_Audio_Hell_Pt__2/</link>
        <guid isPermaLink="true">/2022/Docker_Audio_Hell_Pt__2/</guid>
        
        <category>docker</category>
        
        <category>wine</category>
        
        <category>pulseaudio</category>
        
        
        <category>vst audio software</category>
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Cursed FM Synth</title>
        <description>&lt;h4 id=&quot;as-it-was-not-cursed-enough-already&quot;&gt;As it was not cursed enough already&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cursedfm7.svg&quot; alt=&quot;heck&quot; width=&quot;100%&quot; style=&quot;margin-top: 20px;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;audio-container&quot; style=&quot;margin-bottom: 32px;&quot;&gt;
	&lt;audio src=&quot;/assets//mp3/2022/cursedfm.mp3&quot; preload=&quot;auto&quot;&gt;&lt;/audio&gt;
&lt;/div&gt;

&lt;p&gt;You all know &lt;a href=&quot;https://asb2m10.github.io/dexed/&quot;&gt;DEXED&lt;/a&gt;, an awesome Yamaha DX7 librarian. Seems like I stumbled upon an undocumented feature. When you use it to load a DX7 cart dump, it allows you to select any file on your system. So, why not pick a file, that has nothing to do with DX or even music whatsoever? This way it fills all the registers of a virtual Yamaha with rubbish. And it sounds wild, folks, absolutely untamed.&lt;/p&gt;

&lt;p&gt;Listening back to this, I was kinda imagining those big heads like B. Eno or T. Reznor who have somehow found a way, to do the same with a real physical DX7 keyvoard. Was it really  a dedicated programmator, or were they just sending digital noise in form of SYSEX  messages?&lt;/p&gt;

&lt;p&gt;Probably the former, no matter what my corrupted imagkintation tells me.&lt;/p&gt;

&lt;div class=&quot;downloadBox&quot; onclick=&quot;window.location='/assets/CURSED.syx'; return false;&quot;&gt;
  Download SYX&lt;br /&gt;
  &lt;p style=&quot;font-size: small; margin-top: 2px; margin-bottom: 2px;&quot;&gt;Cursed DX7 Cart&lt;/p&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 26 Jun 2022 14:38:14 +0300</pubDate>
        <link>/2022/Cursed_FM_Synth/</link>
        <guid isPermaLink="true">/2022/Cursed_FM_Synth/</guid>
        
        
      </item>
    
      <item>
        <title>OverType TypeWriter Simulator</title>
        <description>&lt;h4 id=&quot;when-too-realistic-is-not-enough&quot;&gt;When Too Realistic is Not Enough&lt;/h4&gt;

&lt;p&gt;Have you folks seen this amazing JS demo, resembling an &lt;a href=&quot;https://uniqcode.com/typewriter/&quot;&gt;old typewriter&lt;/a&gt;? I, personally, find it hilarious and enjoyable. The ink refill process, the brokeness fader, the click sound, this makes it  almost an ideal &lt;em&gt;soft machine&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There is one  problem though, which, sadly, cannot really attribute that to the precision of the simulation. Sometimes, it will just hangs up, stop reacting to any keystrokes, and there is no way to save the text you’ve already typed, or, continuing the analogy, - feed the page back into the roll, after you fix the jam.&lt;/p&gt;

&lt;p&gt;My intuitive approach to this show-stopper, would be just re-run the bits of javascript that set the virtual typewriter up. I found a very useful code bit somewhere, which worked exactly as I expected.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//run script inside div&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to this, I was able to finish a page of my upcoming horror-story fanzine. Hell yeah, you cannot really achieve it in any other way, than using a good old typewriter!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fanzine01_thumb.png&quot; data-ngsrc=&quot;/assets/images/fanzine01.jpg&quot; data-nanogallery2-lightbox=&quot;{ &amp;quot;viewerGallery &amp;quot;: &amp;quot;none&amp;quot; }&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jun 2022 13:50:55 +0300</pubDate>
        <link>/2022/OverType_TypeWriter_Simulator/</link>
        <guid isPermaLink="true">/2022/OverType_TypeWriter_Simulator/</guid>
        
        <category>js</category>
        
        
        <category>code bits</category>
        
        <category>journalism?</category>
        
      </item>
    
      <item>
        <title>Docker Audio Hell Pt. 1</title>
        <description>&lt;h4 id=&quot;and-the-passive-amoeba-of-linux-audio&quot;&gt;And The Passive Amoeba of Linux Audio&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/figures/amoeba1.svg&quot; alt=&quot;heck&quot; width=&quot;100%&quot; style=&quot;margin-top: 20px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, we are going to quickly reiterate the reason why audio-production on Linux can be challenging (if not frustrating at times). I think, the main reason for that, besides of course, my own incompetence, is audio-facilties being handled in too much of Unix-way. But what is Unix way, anyway? Well, in short, we have one isolated piece of software doing one single thing, but doing well.If any additional processing needs to be done with the output, we pipe (|) it into another isolated piece of software. Several steps of that form a &lt;em&gt;pipeline&lt;/em&gt;. 
Sounds great, right? Well, unfortunately, sometimes the seeming tidiness of this approach could quikcly go down the tubes (pun intended). 
Once you need something specific, or something simply done &lt;em&gt;your&lt;/em&gt; way, you’ll have to explore the whole pipeline from end to end. It’s alright, if the nodes there are simple utilities like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt;, but imaging exploring each of those having massive tectonic layers of legacy software archeology above them.&lt;/p&gt;

&lt;p&gt;So, here is how this usually happens. It all starts with ALSA, a kernel subsystem, which works directly with your audio hardware. It does not efficiently handle software mixing and routing, though, so applications  cannot share your device inputs/outputs effieicently, and we were not even talking about routing audio inputs and outputs between them. 
To satisfy those needs, PulseAudio was introduced. A software wrapper around ALSA, that re-routes all the audio streams through itself, and distributes it between existing hardware inputs and outputs (sinks). Applications compiled to use PulseAuido as audio-driver cannot use ALSA directly, all according to the hightest standards of incomprehensible madman’s logic we maintain in the world of prograaming.&lt;/p&gt;

&lt;p&gt;PulseAudio, however had some issues with latency, which made it hardly usable for “professional” audio-recording, that usually includes near real-time record monitoring, for example. 
To solve problem, purposedly introdued, we wrote an alternative to PulseAudio called JACK. Does this remind you of &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Futurological_Congress&quot;&gt;“The Futurological Congress”&lt;/a&gt;? For me it totally does.
For a long time, JACK was the standard for (semi)professional audio work on Linux. Apparently, does not play nicely with PulseAudio. Some applications, (ex: Wine), does not support JACK at all. Of course, Wine has WineASIO, which can be routed to JACK, however, it is possible only for applications that use ASIO for audio, i.e. DAWs.&lt;/p&gt;

&lt;p&gt;Both JACK and Pulseaudio, have different solutions for audio-over network. PulseAudio has native client-server support, and also , a special audio-sink for streaming audio in RTP protocol (is it the same thing as zeroconf or not?). Judging by these configuration strings, client-server support of pulseaudio, can use TCP as a transport, and something called “native”, which I presume, would be standard unix-sockets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/figures/amoeba2.svg&quot; alt=&quot;heck&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JACK provides &lt;a href=&quot;https://jackaudio.org/faq/netjack.html&quot;&gt;several ways&lt;/a&gt; remote audio networking. It’s native &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netone&lt;/code&gt; addon using CELT codec and master/follower pattern,  and some newer netJACK2, which has network discovery.&lt;/p&gt;

&lt;p&gt;Lately, yet another ultra-low-latency professional-audio-grade Unix soundsystem was introduced. It’s called PipeWire, and it is sort of a chamenion protocol, which can act as a PulseAudio backend for PulseAudio clients, Jack backend to Jack clients and so on. AFAIK, Pipewire does not have audio-over-network support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Some amoebas are not shown on the figures, simply because they are considered extinct. Before ALSA, earlier versions of Linux were shipped with Open Sound System (OSS), which then was appropriated and no longer counts as free software. However, as we know, once introduced at the kernel level, is destined to be supported for eternity. That’s why ALSA still has an OSS emulation mode.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jun 2022 09:47:54 +0300</pubDate>
        <link>/2022/Docker_Audio_Hell/</link>
        <guid isPermaLink="true">/2022/Docker_Audio_Hell/</guid>
        
        <category>docker</category>
        
        <category>wine</category>
        
        <category>pulseaudio</category>
        
        
        <category>vst audio software</category>
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>GoToDrums. Free Drum Sample Lib</title>
        <description>&lt;h4 id=&quot;motivation&quot;&gt;Motivation&lt;/h4&gt;

&lt;p&gt;Challenging the paradigm of taking sampled drum sounds for granted and using them as, if it is one of the most conventional practices that constitute the framework for creating “electronic music”.&lt;/p&gt;

&lt;h4 id=&quot;attempt-at-some-historical-excourse&quot;&gt;Attempt at Some Historical Excourse&lt;/h4&gt;

&lt;p&gt;Since when  had it became like that?&lt;/p&gt;

&lt;p&gt;Sampling one-hit percussion, or, alternatively, recreating it with synthesis, was the primary direction in early electronic music, that made it into consumer sector, since the nature of battery instruments implies repetition, and those sounds are usually short, which made then good candidates to be utilized in first low-memory digital samplers. Since those instruments usually do not have a strongly defined pitch, so the pitch change is not used as a form of expression, when playing those. That eliminates the problem of handling changing pitch of an instrument, during synthesis or having to store a large number of pitches in sampler’s memory. Early rhythm-machines, were mostly built around borderline neglecting the timbral structure in favour of persistence of generated rhythmic pattern, e.g. a sequence of transients.&lt;/p&gt;

&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;

&lt;p&gt;Overall, the sound of this small library, can be described as something really lo-fi, but still moderately punchy and usable. To put those
 samples together, I’ve been digging through a whole lot of source material. This &lt;a href=&quot;https://www.youtube.com/watch?v=DFhFDrlYTng&amp;amp;t=1063s&quot;&gt;tutorial&lt;/a&gt; about recreating a snare drum sound with FM
  synthesis, and this SOS &lt;a href=&quot;https://www.soundonsound.com/techniques/practical-cymbal-synthesis&quot;&gt;article&lt;/a&gt; about cymbal synthesis, were the most important bits of information that kickstarted the whole thing. Rest of this kit’s pieces were done intuitively. Part of those are very basic, like subtractive synthesis, other came out from more adventurous approaches, including resonant filter banks, and layering of found sounds.&lt;/p&gt;

&lt;p&gt;Using this lib, I put together a simple gloomy rock tune, what would serve the demonstration purposes. But before we proceed, I feel like I need to put a disclaimer: this collection of sounds it not designed to be high-quality commercial grade product, but rather an exercise, showcasing the exciting possibilities that open up the moment you get off the beaten “pre-cooked drum samples” path.&lt;/p&gt;

&lt;div class=&quot;audio-container&quot; style=&quot;margin-bottom: 32px;&quot;&gt;
	&lt;audio src=&quot;/mp3/2021/GoToDrums_demo.mp3&quot; preload=&quot;auto&quot;&gt;&lt;/audio&gt;
&lt;/div&gt;

&lt;div class=&quot;downloadBox&quot; onclick=&quot;window.location='/assets/soundfonts/gotodrums.zip'; return false;&quot;&gt;
  Download Zip&lt;br /&gt;
  &lt;p style=&quot;font-size: small; margin-top: 2px; margin-bottom: 2px;&quot;&gt;GoToDrums Soundfont&lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h4&gt;

&lt;p&gt;Sometimes, rhythmic patterns and note length are really more important than the timbres themselves. This sets us back to the origins of rhythm-machines. This aspect of how humans perceive rythms is what made the concept of “programmed drums” wholesome.&lt;/p&gt;

&lt;p&gt;So, while trying to nail down the timbres, I should have really been paying more attention to dynamics, for this whole sample patch to be more expressive. Well, there were reasons for that beyond my ignorance. Initially, using a free version of TX Software Sampler, I found a number of expression-related settings to be non-intuitive, while other to have UX and stability issues. No offence to the authors, it might be my DAW’s or my OS problem as well. 
Probably, my (kill to) cure from that would be trying to do the same workout on Yamaha sampler, so I’d realise how much of privileged “mouse-smudger” I am, using point-and-click software.&lt;/p&gt;

&lt;p&gt;Cymbals naturally have their dynamic range very wide. And practically none of the widespread approximations (FM, samples, resonant filters) does cover the desired palette of hues on their own. So, ideally, when trying to approximate a cymbal sound, you would have to change the model/approach when reaching a certain velocity boundary. Like, one FM patch for the lower velocities, another one for the moderate ones, and when, probably some combination of pre-recorded sound and resonant. And since the change of timber could be dramatically obvious, you’ll probably need to apply to crossfading between them as well.&lt;/p&gt;

&lt;p&gt;The latter sounds like a whole lot of manual work on any sampler, so, if I ever go down that path, that would be, I’ll have to think about automating the process of laying down the usual 32/64/128 levels of velocity, each from a separate sampled sound.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Jul 2021 17:44:02 +0300</pubDate>
        <link>/2021/GotoDrums/</link>
        <guid isPermaLink="true">/2021/GotoDrums/</guid>
        
        <category>drums</category>
        
        
        <category>vst audio software</category>
        
      </item>
    
      <item>
        <title>Drum Loops From Nowhere</title>
        <description>&lt;h4 id=&quot;why-should-i-do-what-everyone-does&quot;&gt;Why Should I Do What Everyone Does&lt;/h4&gt;

&lt;p&gt;What I currently miss the most with my minimalist no-budget music production setup, definitely would be some organic, pounding and swinging battery. I do not really have much interest in using loops or pre-processed sample libs (tHat CUTt trhU Ze MiX!), because as Chris Randall once said, you have no time to screw around with somebody else’s music if you’re really want to make your own. Truly, with the standards I impose on my self, simply downloading a copy of MT PowerDrums, would be a statement of artistic and engineer impotence.
So far, I got some applicable results in “personalised” percussive sounds, by exploring the following approaches:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Basic subtractive and FM synthesis. Unless, you are a sound-design and electrical-engineering expert, that is your usual “blip-blop” type of electro-drum sounds.&lt;/li&gt;
  &lt;li&gt;Found objects. This is always fun. Just put your smartphone on record every time you take out the trash,&lt;/li&gt;
  &lt;li&gt;Physical modeling. Good for membrane percussion, quickly gets complicated for cymbals, because of their complex “clustered” nature of sound.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here is a small demo I built around a manipulated drum loop which was generate. On the course of this post I’ll try to explain how you can create one yourself.&lt;/p&gt;

&lt;div class=&quot;audio-container&quot; style=&quot;margin-bottom: 32px;&quot;&gt;
	&lt;audio src=&quot;/mp3/2021/nn_drums_demo.mp3&quot; preload=&quot;auto&quot;&gt;&lt;/audio&gt;
&lt;/div&gt;

&lt;div class=&quot;downloadBox&quot; onclick=&quot;window.location='/assets/nn_gen_drum_phrases.zip'; return false;&quot;&gt;
  Download Zip&lt;br /&gt;
  &lt;p style=&quot;font-size: small; margin-top: 2px; margin-bottom: 2px;&quot;&gt;Sample WAVs Generated by NN&lt;/p&gt;
&lt;/div&gt;

&lt;!-- readmore --&gt;

&lt;h4 id=&quot;neural-networks-for-sound-generation&quot;&gt;Neural Networks for Sound Generation&lt;/h4&gt;

&lt;p&gt;What I have not tried yet, would be NN-generated sound for drum loops and samples. First, and foremost (for a math-n00b like me), it requires
 sufficiently less
 mathematical knowledge
. Neural
 networks consist almost entirely of linear algebra. No third-grade partial derivative equation systems, which wonderful world of physical modeling is so full of. Second, if current physical modeling paradigm concentrates of modeling a sound of a single hit (excitation of membrane or string pluck), generative neural networks, being completely agnostic of the physical nature of signals they are working with, could in fact, produce a non-deterministic rhythmic sequence of percussion hits (or rather, transients), if only we would train the model exclusively on soloed drum parts, of course. Which is the exact thing we’re gonna do!&lt;/p&gt;

&lt;p&gt;This way, a trained NN model could become an endless source of free and unique sounds, phrases and rhythmic textures . Well, maybe not completely free, as it still considered a but of a legal “gray area”, whenever you really own something to the copyright owners of the material you’ve trained you neural network on. Some GAN software explicitly states in it’s license, that the code itself and the models it produces are free for non-commercial use only.&lt;/p&gt;

&lt;p&gt;The reason, it excites me so much, is that I personally feel, that this kind of approach is a bit underexplored area of artistic expression using machine-learning. I draw this conclusion from the fact, that the most advanced projects in this segment, such as Jukebox AI, seem to concentrate on producing a flow of “consumption ready” generated “music”. I netherless, admit the stellar results in facilitating that, achieved by community of developers and users of that software. My goals are much less ambitious.&lt;/p&gt;

&lt;h4 id=&quot;generative-adversarial-networks-in-one-passage-under-a-minute&quot;&gt;Generative Adversarial Networks in One Passage Under a Minute&lt;/h4&gt;

&lt;p&gt;The basics of machine learning is finding the coefficients (weights) for nodes in a traversable structure, so when calculating the output, it
 matches the label apriori given to a sample of input data. The way nodes are connected loosely represent, hence the name. To describe a wide
  area of machine learning applications on a very high-level, a term “labeling” could be used. So, NN model that got its node weights determined by being “trained” on million of kitten and puppy photos, could then determine (“label”) if an arbitrary input photo is a photo of a cub or a kitten with a decent level of accuracy.
In case of generating content task, Two neural networks, the generative one and discriminative one. When learning, generative network acquires a latent space of, from which it draws samples to produce random signals. Those random signals then sent to discriminative network, which is trained to determine if those have the same characteristics as initial data. For sake of that, both networks are trained on the same dataset. So, by playing this , this pair are capable of fluently generating new content that would “fit” the initial data traits.&lt;/p&gt;

&lt;h4 id=&quot;using-wavegan-and-aws-cloud-computing-solution-to-facilitate-the-experiment&quot;&gt;Using WaveGAN and AWS Cloud Computing Solution to Facilitate the Experiment&lt;/h4&gt;

&lt;p&gt;For our attempt at NN-generated percussion we will be using &lt;a href=&quot;https://github.com/chrisdonahue/wavegan&quot;&gt;WaveGAN&lt;/a&gt; - an implementation of GAN which samples audio at high-temporal resolutions, thus, being to capture spectral structures across a range of timescales, when learning. It is implemented in Python using &lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;Tensorflow 1.2&lt;/a&gt; framework.&lt;/p&gt;

&lt;p&gt;So, how do we train our WaveGAN model on those audio-files? 
Well, unless you are fond of computer games, issued after Y2K, or (unlike me) a real scientist with access to your university’s mainframe, you probably do not have a powerful enough GPU hardware to train a GAN in a comfort of your dungeon. As a cloud based solution that provides GPU-based computing I chose AWS, for the following initial reaons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Uncanny familiarity. If you have a goatie and know what “MVC” is, I have bad news for ya.&lt;/li&gt;
  &lt;li&gt;Religious concerns (there is no way I’m touching Azure)&lt;/li&gt;
  &lt;li&gt;Advertised dedicated machine learning solution (emphasis on “advertised”)&lt;/li&gt;
  &lt;li&gt;Advertised “Free-Tier” for newly created accounts (double emphasis on “advertised”)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;sagemaker-high-level-overview-and-initial-experiment-plan&quot;&gt;SageMaker. High Level Overview and Initial Experiment Plan&lt;/h4&gt;

&lt;p&gt;Let’s take a high level overview of how SageMaker works. 
So, skimmed from all the buzzwords and marketing, it is a number of core Amazon AWS offerings (virtual machines and cloud storage), all duck-taped toghether around the topic of machine learning. Basically, it automates the following flow, that you would otherwise do manually when traning the neural network in the clooud:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Provisioning and starting an instance&lt;/li&gt;
  &lt;li&gt;Copying the program and train data to the instance&lt;/li&gt;
  &lt;li&gt;Start the program in the training mode&lt;/li&gt;
  &lt;li&gt;Collect metrics&lt;/li&gt;
  &lt;li&gt;Stop training&lt;/li&gt;
  &lt;li&gt;Copy the model from the instance to AWS S3 cloud storage (“checkpoint”)&lt;/li&gt;
  &lt;li&gt;Shut down the instance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;// Illustration, training jobs&lt;/p&gt;

&lt;p&gt;To be fair, it actually does more than that. For example, it supports training parallelization (it can partition by data, or by.). Sounds fun, but unless you’re using something readymade from SageMaker’s marketplace , you’ll have to do quite unobvious modifications to you code, to make it work.&lt;/p&gt;

&lt;p&gt;Also, you’ll get something called “SageMaker Studio”, a small dedicated server, fronted by Jupyter Python Notebook, which aslo has a permanent SSD storage and all the core AWS utils as well, as the essential data-science Python libs like SciPy pre-installed. To execute the notebook’s cell, you’ll need to select a runtime and a kernel, which will start a remote cloud instance and connect to your notebook to a Python kernel . You can choose between TensorFlow and PyTorch being the backbone of your computations.
Those notebooks, would be, actually, useful, when getting the output of your trained network. because SageMaker’s solutions for hosting a model seem a bit overcomplicated to me, as they have a flow and setup completely separate from the “training” phase.&lt;/p&gt;

&lt;h4 id=&quot;the-process-expectations-vs-reality&quot;&gt;The Process. Expectations vs Reality&lt;/h4&gt;

&lt;p&gt;Before even creating my personal Amazon account, I had the following theoretical steps in mind: 
Steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create an Amazon Account, they offer something like one month of free computation using their SageMaker platform.&lt;/li&gt;
  &lt;li&gt;Use WaveGAN (probably not the best choice for the task, but seems easy enough to set up and go).&lt;/li&gt;
  &lt;li&gt;Get some raw material. Demo loops of drum libraries should be a good enough bit for the first try&lt;/li&gt;
  &lt;li&gt;Upload them to S3 somehow&lt;/li&gt;
  &lt;li&gt;Start learning&lt;/li&gt;
  &lt;li&gt;Monitor the training. Use log-based monitoring&lt;/li&gt;
  &lt;li&gt;Start a notebook instance&lt;/li&gt;
  &lt;li&gt;Load the trained model&lt;/li&gt;
  &lt;li&gt;Generate sounds&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, how did it hold up against my initial expectations? Well, OK-ish, I’d say.&lt;/p&gt;

&lt;p&gt;First and foremost, AWS Console Web UI is nothing but a freaking labyrinth. So, I had to bookmark a bunch of pages, to whom I kept constantly coming back to lookup and refrence things along the way.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;amp;all-free-tier.sort-order=asc&amp;amp;awsf.Free%20Tier%20Types=*all&amp;amp;awsf.Free%20Tier%20Categories=*all&quot;&gt;AWS free tier guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sagemaker.readthedocs.io/en/stable/overview.html#train-a-model-with-the-sagemaker-python-sdk&quot;&gt;Custom learning script on a SageMaker instance&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sagemaker-examples.readthedocs.io/en/latest/training/bring_your_own_container.html&quot;&gt;Build and bring your own container&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html&quot;&gt;AWS Admin credentials&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/sagemaker/pricing/&quot;&gt;SageMaker pricing, instance types and stuff&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sagemaker.readthedocs.io/en/stable/frameworks/tensorflow/using_tf.html&quot;&gt;How to adapt the script&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/general/latest/gr/sagemaker.html#limits_sagemaker&quot;&gt;AWS Service quotas&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/aws/deep-learning-containers/blob/master/available_images.md&quot;&gt;AWS Docker Containers for Machine Learning&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Second, according to the documentation, if you want SageMaker to work with a custom learn algorithm, you’ll need to build and deploy your custom docker image. Yeah, “DevOps Plumber” trade union card of GTFO, this is how we do things in the world of enterprise-level cloud computing, right? Well, maybe I am too harsh. Actually, you can start a traning job from SageMaker Studio using an entrypoint that starts the custom algorythm. to use multiple source files, you need to use the source_dir argument when setting up the Estimator, and then put your code files in the directory you specify.&lt;/p&gt;

&lt;p&gt;Minor caveat though: if your algorithm uses a dependency outside standard GNU/SciPi set, which is almost always the case for any audio-related, you cannot provide it with the training job. 
Techincally, you can install this dependency on your SageMaker Studio instance and run your code there. But guess what? Since training utilises almost all of the CPU, so, after 10 mins of no heartbeats, Amazon marks the instance as dead and shuts it down. Uskomaton!&lt;/p&gt;

&lt;p&gt;Theoretically, the manual tells you, that you could use the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scipy&lt;/code&gt; utilities for reading your audio files, if they stricly comply to 44.2Khz 16bit PCM standard. I tried that, with the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;f &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;find ./ &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*.wav'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do 
&lt;/span&gt;ffmpeg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-acodec&lt;/span&gt; pcm_s16le &lt;span class=&quot;nt&quot;&gt;-ar&lt;/span&gt; 44100 &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.wav&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;z.wav&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.wav&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;z.wav &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That did not work, as WaveGAN kept crashing over reading input files, so I refined steps of training a GAN to be:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Build and upload your custom image to Amazon ECR&lt;/li&gt;
  &lt;li&gt;Upload raw material to S3&lt;/li&gt;
  &lt;li&gt;Start a training job either through SageMaker UI or Python API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice how I’ve amended the “monitoring” step. I did it, because SageMaker’s proposed solution for monitoring is a freaking joke. Like downloading the checkpoints and examining them locally with Tensorboard? &lt;strong&gt;Bruuuuuuh&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using this tutorial I was able to put together a modified version of the original tensorflow docker container which I made publicly available in this &lt;a href=&quot;https://github.com/deviant-syndrome/wavegan-sagemaker&quot;&gt;repo&lt;/a&gt;. After a few 30 min feedback cycles, I was able to get it working.&lt;/p&gt;

&lt;p&gt;This is where you’ll begin to realize that those “Free Tier” conditions are quite limiting. First and foremost, no GPU instances are included in free tier limits. Technically, TensorFlow supports calculation on XLA devices, and you would need to change the following in the initialisation code of WaveGAN &lt;a href=&quot;https://github.com/chrisdonahue/wavegan/blob/master/loader.py#L193&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            &lt;span class=&quot;s&quot;&gt;'/device::XLA_CPU:{}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefetch_gpu_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sweet, but it is still notebably slower than one would expect, I got about 720 steps overnight, versus about 2000 on a GPU instance. Maybe I should have been using the CPU version of the AWS Tensorflow image for that?&lt;br /&gt;
And adversities with the GPU instances do not end on their cost. They are disabled in your AWS account by default and you have to contact AWS support to get access to them. AWS support service SLA is about 24 hours, which is quite alright for an enterprise like this, but could be a real show-stopper, when you have your creative juices flowing.&lt;/p&gt;

&lt;h4 id=&quot;what-was-left-behind&quot;&gt;What was left behind&lt;/h4&gt;

&lt;p&gt;I did not familiarize myself enough with the machine learning domain in general and Tensorflow framework specifically to take advantage of &lt;a href=&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/distributed-training.html&quot;&gt;SageMaker’s distributed learnning capabilities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Seems like WaveGAN output sample rates are quite low 16-22Khz depending on the output length. This means that we would have a very pronounced aliasing in the cymbals/percussion domain, and generally low sound fidelity.&lt;/p&gt;

&lt;p&gt;For more rhythmic excitement and cohesiveness, I probably need longer slices (currently, maximum is 4 seconds at 16Khz)&lt;/p&gt;

&lt;p&gt;It might be better to skip the AWS WebUI altogether and use boto3 library to run the code that deploys image and runs training locally.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boto_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_caller_identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Account&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boto_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region_name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{}.dkr.ecr.{}.amazonaws.com/sagemaker-decision-trees:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Estimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;ml.c4.2xlarge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;s3://{}/output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sagemaker_session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I am still not sure if I can provide clear instructions on setting up the AWS permissions for the whole setup. So, I’ll just leave a citation from AWS documentation here:&lt;/p&gt;

&lt;p&gt;Running this notebook requires permissions in addition to the normal SageMakerFullAccess permissions. This is because we’ll creating new repositories in Amazon ECR. The easiest way to add these permissions is simply to add the managed policy AmazonEC2ContainerRegistryFullAccess to the role that you used to start your notebook instance. There’s no need to restart your notebook instance when you do this, the new permissions will be available immediately.&lt;/p&gt;

&lt;p&gt;I used a very basic soloed drumkit from a drum lib demo for the input data. Next time I could try something more extreme like those isolated drum playthroughs: &lt;a href=&quot;https://www.youtube.com/watch?v=7tw0l5l66N0&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=2fXAWK42na8&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=6nlcH_9Bbbk&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=mL-LyKcFE5c&quot;&gt;4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Need to see, how WaveGAN is generating sample slices from the source audio. Need to see the number of slices and 
how they are affecting the number of training epochs. The number of steps recommended in the manual is 200K. 
For that matter I would maybe need to extract the slicing logic into separate “analytical” code that would prompt me about the numer of steps/time needed.&lt;/p&gt;

&lt;h4 id=&quot;ps&quot;&gt;P.S.&lt;/h4&gt;

&lt;p&gt;If you ever wandered how to run docker on a machine without a network interface:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dockerd &lt;span class=&quot;nt&quot;&gt;--iptables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 14 Jun 2021 12:36:27 +0300</pubDate>
        <link>/2021/Drum_Loops_From_Nowhere/</link>
        <guid isPermaLink="true">/2021/Drum_Loops_From_Nowhere/</guid>
        
        <category>wavegan</category>
        
        <category>software</category>
        
        <category>docker</category>
        
        <category>dsp</category>
        
        
        <category>code bits</category>
        
        <category>vst audio software</category>
        
      </item>
    
      <item>
        <title>MacOS Catalina Docker Wine For Windows VST Plugins</title>
        <description>&lt;h4 id=&quot;aka-what-the-hell-am-i-doing-with-my-life&quot;&gt;AKA What the Hell am I Doing with My Life&lt;/h4&gt;

&lt;p&gt;Do you like strange audio software like I do? Most of really odd and retro stuff, like a total emulation of PPG Wave Computer Suite, or this micro electro drum machine, runs only under Win32 and, therefore out of my direct reach as a &lt;em&gt;typical&lt;/em&gt; mac user.
This also applies to a lot of software written for academic research purposes. Usually those programs were made to perform specific calculations that prove the thesis stated in one’s master’s paper. Usually, written by people who do not specialize in software, during pre-Jupiter pre-cloud era, the choice of platform and tooling was . Yes, there were the times, when they were teaching engineers and mathetimaticans to program on Delphi and Prolog. Don’t ask me why. Fun fact, I know for sure, that there are still people who support and maintain in-house Delphi projects.&lt;/p&gt;

&lt;p&gt;So, what are my options? Well, current versions of Wine does not support MacOS Catalina, and Winebottler has a very strange paradigm of usage which seems totally alien to me, Like packing exe into Mac App? Automated installations? On what planet am I? And, of course, there is no way, I’m trying to build Wine myself, as it now requires pulling all of the 32-bit versions of development libraries and such. Something is sure gonna break, and I am not smart enough to deal with that confidently. So, why not try docker instead, since I do care about latency for the specified use cases.&lt;/p&gt;

&lt;p&gt;So, I’ve assembled a docker image, lousely based on the ones provided by &lt;a href=&quot;https://github.com/jessfraz/dockerfiles/tree/master/pulseaudio&quot;&gt;Jess Frazelle&lt;/a&gt; for PulseAudio support and &lt;a href=&quot;https://github.com/scottyhardy/docker-wine&quot;&gt;Scott Hardy&lt;/a&gt; for X session support.&lt;/p&gt;

&lt;p&gt;Dockerfile is available in &lt;a href=&quot;https://github.com/deviant-syndrome/pulse-carlawine&quot;&gt;this repo&lt;/a&gt; which also includes pulseaudio config files.&lt;/p&gt;

&lt;p&gt;To get the X forwarding from container, which would act as a thin client of sorts. We will be using XQuartz for MacOS. From the XQuartz preferences, in the security tab, make sure Allow connections from network clients is enabled. Restart XQuartz.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xhost +localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Did not won over MONO(?)/framework installation problems, though. Every time I run a fresh image it would ask me to download a few things. Not critcal for me right now. 
When running a Linux distro inside docker, ALSA will not work properly out of the box, as it would not be able to locate a hardware audio
 interface (no dummy hw bindings allowed at ALSA level, if you want that - welcome to kernel recomplication!). On most UNIX and Unix-like environments, you can just bind your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/snd/audio &lt;/code&gt; from host to docker container, but not on your shiny polished MacOS. One of the possible solutions here, is to use pulseaudio client-server over its native transport.&lt;/p&gt;

&lt;p&gt;Pulseaudio was once designed to be a “distribution layer” between ALSA and applications, for them to share audio channels and buffers properly
. It worked quite well for general-purpose multimedia apps, but fell a bit short when it came to .. working with audio (i.e DAWs, audio-editors, samplers, etc). Therefore, people designed Jack which serves a similar purpose, but with much richer feature set and latency footprint. I believe, Jack is currently the “unofficial standard” for audio and music production on Linux.&lt;/p&gt;

&lt;p&gt;As you see from the file, I also had to install KXStudio stuff. Setup repos, according to the &lt;a href=&quot;https://kx.studio/Repositories&quot;&gt;instructions&lt;/a&gt; on their site. 
I decided to go with Carla as a VST host. For it, I also installed wine bridges, x32 and x64 one. 
There was some typical open-source fun stuff along the way, of course. Like, I had to go to Carla’s settings and enable the corresponding experimental feature. After that I tried to scan for new plugins, but that did not work (worked when I ran it under root privileges for some reason). Finally, I got it working by just dragging and dropping a DLL file onto Carla’s rack panel.&lt;/p&gt;

&lt;p&gt;Curious fact, I’ve also tried to run &lt;a href=&quot;http://www.niallmoody.com/apps/pedalboard2&quot;&gt;Pedalboard2&lt;/a&gt; VSTHost through Wine. It starts, it loads the Win32 plugin DLL, however the audio it produces consists of clicks and pops exclusively. In theory, WineASIO should mitigate those problems, however it is built exclusively around Jack. 
And this is where we will be facing the fundamental problem with this kind of setup: pulseaudio and Jack does not mesh well together at all. You cannot output from Jack to pulseaudio sink. Jack forwarding requires a Jack server on the host machine. And installing and running Jack on MacOS is the most unnatural thing ever (by my standards, of course). 
So, I opted for pulseaudio and it’s native sink. Thankfully, there is a brew formula for pulseaudio. So, just run the sink like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pulseaudio &lt;span class=&quot;nt&quot;&gt;--load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;module-native-protocol-tcp &lt;span class=&quot;nt&quot;&gt;--exit-idle-time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--daemon&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more or less correct VST plugin GUI display, I also had to install several Wine-specific fix-ups.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;winetricks mfc42
winetricks gdiplus
winetricks corefonts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, to run the image with X and pulseaudio forwarding:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host.docker.internal:0 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PULSE_SERVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker.for.mac.localhost &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; ~/.config/pulse:/home/pulseaudio/.config/pulse &lt;span class=&quot;nt&quot;&gt;--entrypoint&lt;/span&gt; /bin/bash &lt;span class=&quot;nt&quot;&gt;--ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; dieheart/pulse2:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, conceptually it works. As you can see, I’m sharing this “pulseaudio-cookie” file across guest and host by simply mounting the config directory to container’s filesystem. And now, the caveats.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It seems, like PA can only output to a &lt;strong&gt;physical&lt;/strong&gt; audio device. I tried editing the config in multiple ways, and it explicitly stated that in the error message: [github link]. Not really total deal breaker of course, if you only need monitoring. You can monitor and then simply record it to WAV inside container.&lt;/li&gt;
  &lt;li&gt;No freaking MIDI support. MIDI sequencing and events are all handled within ALSA, therefore require a device to be present. Well, you know what. I can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_Sound_Control&quot;&gt;OSC protocol&lt;/a&gt; for that, and pass through a configured docker network port.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a handful of directions we can head from here. And it feels that they all go to Hell. So, I took the random one, which would be try to compile pulseaudio myself, and make an override that will output to virtual device.&lt;/p&gt;

&lt;p&gt;The intricacies of that should be somewhere in &lt;a href=&quot;https://gitlab.freedesktop.org/pulseaudio/pulseaudio/-/blob/master/src/modules/macosx/module-coreaudio-device.c&quot;&gt;PulseAudio CoreAudio Module&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 02 Jun 2021 08:44:01 +0300</pubDate>
        <link>/2021/MacOS_Catalina_Docker_Wine_For_Windows_VST_Plugins/</link>
        <guid isPermaLink="true">/2021/MacOS_Catalina_Docker_Wine_For_Windows_VST_Plugins/</guid>
        
        <category>docker</category>
        
        <category>wine</category>
        
        <category>pulseaudio</category>
        
        
        <category>vst audio software</category>
        
      </item>
    
      <item>
        <title>SuperCollider Help Panel Custom CSS</title>
        <description>&lt;h4 id=&quot;dark-systems-for-darkminded-people&quot;&gt;Dark Systems for Darkminded People!&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sc_theme.png&quot; alt=&quot;Screenshot SuperCollider&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dir:&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt;&lt;span style=&quot;background: green; color: aquamarine&quot;&gt;~/Library/ApplicationSupport/SuperCollider/Help&lt;/span&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First, some CSS mad skillz, mostly based on &lt;a href=&quot;https://github.com/gkroon/dracula-css&quot;&gt;Dracula&lt;/a&gt; theme. Notice the dirty 
hack to evade flooding into CodeMirror spans.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;custom.css
&lt;/summary&gt;

  &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;248&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;248&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;242&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#summary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#6cd4ae&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.warning&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;aliceblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.note&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blueviolet&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.note&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blacks&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.note&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;aliceblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;transparent&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#menubar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:visited:hover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:visited:hover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;menuitem&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;menuitem&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.link&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.link&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;241&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;164&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;headline&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;headline&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;166&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;overlay&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;lightbox&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;blockquote&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;dl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.BigButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.TabLink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.install&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;text-indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;appearance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-moz-appearance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-webkit-appearance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;appearance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-moz-appearance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-webkit-appearance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.selected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;139&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;233&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

&lt;/details&gt;
&lt;p&gt;Then disable CodeMirror bindings in the following two files. In the last file, I substituted the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cm-default&lt;/code&gt; with
the ones you’ll find in CodeMirror’s theme CSS files, which also goes by the name of the famous Romanian count. 
I of course could change the CodeMirror’s theme the proper way, as its documentation suggests, however, then I would
need to change the HTML help file generation for SC, which I’m too lazy and desorganized for.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;editor.css
&lt;/summary&gt;
  &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/*!* syntax hightlighting *!*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-keyword { color: #0000e6; font-weight: bold; }*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-built-in { color: #3333bf; }*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-number { color: #980099; }*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-symbol { color: #007300; }*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-class { color: #0000d2; }*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-primitive { color: #0000d2; }*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-char { color: #007300; }*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-env-var { color: #8c4614; }*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-comment { color: #bf0000; }*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-string { color: #5f5f5f; }*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-text { color: #000000; }*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;codemirror.css
&lt;/summary&gt;
  &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* DEFAULT THEME */&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.cm-s-default.CodeMirror&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-gutters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#282a36&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#f8f8f2&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-gutters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#282a36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-cursor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;border-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;thin&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#f8f8f0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-linenumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#6D8A88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-selected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-line&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::selection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-line&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::-moz-selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::-moz-selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::-moz-selection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-comment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#6272a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-string-2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#f1fa8c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#bd93f9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#50fa7b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-variable-2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-def&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#50fa7b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ff79c6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-keyword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ff79c6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-atom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#bd93f9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-meta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#f8f8f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ff79c6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-attribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#50fa7b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-qualifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#50fa7b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#66d9ef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-builtin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#50fa7b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-variable-3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.cm-type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ffb86c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-activeline-background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.cm-s-default&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.CodeMirror-matchingbracket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;underline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-header {color: blue;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-quote {color: #090;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-negative {color: #d44;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-positive {color: #292;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-header, .cm-strong {font-weight: bold;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-em {font-style: italic;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-link {text-decoration: underline;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-strikethrough {text-decoration: line-through;}*/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-keyword {color: #708;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-atom {color: #219;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-number {color: #164;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-def {color: #00f;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-variable,*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-punctuation,*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-property,*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-operator {}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-variable-2 {color: #05a;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-variable-3, .cm-s-default .cm-type {color: #085;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-comment {color: #a50;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-string {color: #a11;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-string-2 {color: #f50;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-meta {color: #555;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-qualifier {color: #555;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-builtin {color: #30a;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-bracket {color: #997;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-tag {color: #170;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-attribute {color: #00c;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-hr {color: #999;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-link {color: #00c;}*/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/*.cm-s-default .cm-error {color: #f00;}*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*.cm-invalidchar {color: #f00;}*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/details&gt;
</description>
        <pubDate>Tue, 12 Jan 2021 20:42:54 +0200</pubDate>
        <link>/2021/sc-help-css/</link>
        <guid isPermaLink="true">/2021/sc-help-css/</guid>
        
        <category>supercollider</category>
        
        
      </item>
    
      <item>
        <title>Sample-Replacement Backwards</title>
        <description>&lt;h4 id=&quot;mobys-approach&quot;&gt;Moby’s approach&lt;/h4&gt;

&lt;p&gt;Sample reinforcement (or even complete replacement) has became the stample of modern drum production. Surprisingly enough, this practice is not bounded to stricly “electronic” or “sample-based” music. Even for “rock” records, some studios skip the drumkit recording entirely and just program all the drums instead. The more “extreme” drum parts get, the more likely the production will embrace some kind of sample reinforcment, with justification for that being the hightest requirements for timing and hitting consistnecy dictated by the genre.&lt;/p&gt;

&lt;div class=&quot;video-thumb-container&quot;&gt;
  &lt;img class=&quot;video-thumb&quot; id=&quot;moby1.jpg&quot; src=&quot;/assets/yt-thumbs/moby1.jpg&quot; data-ngsrc=&quot;https://www.youtube.com/watch?v=VJgqdvlSwZs&quot; data-nanogallery2-lightbox=&quot;{ &amp;quot;viewerToolbar&amp;quot;: { &amp;quot;display&amp;quot;: false } }&quot; /&gt;
  
    &lt;svg class=&quot;video-thumb-icon&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:cc=&quot;http://creativecommons.org/ns#&quot; xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; xmlns:svg=&quot;http://www.w3.org/2000/svg&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot; xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot; inkscape:version=&quot;1.0beta2 (2b71d25, 2019-12-03)&quot; sodipodi:docname=&quot;movie-videos.svg&quot; xml:space=&quot;preserve&quot; style=&quot;enable-background:new 0 0 122.88 95.8&quot; viewBox=&quot;0 0 122.88 95.8&quot; y=&quot;0px&quot; x=&quot;0px&quot; id=&quot;Layer_1&quot; version=&quot;1.1&quot;&gt;&lt;metadata id=&quot;metadata1022&quot;&gt;&lt;rdf:RDF&gt;&lt;cc:Work rdf:about=&quot;&quot;&gt;&lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;&lt;dc:type rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;&lt;/cc:Work&gt;&lt;/rdf:RDF&gt;&lt;/metadata&gt;&lt;defs id=&quot;defs1020&quot; /&gt;&lt;sodipodi:namedview inkscape:current-layer=&quot;Layer_1&quot; inkscape:window-maximized=&quot;1&quot; inkscape:window-y=&quot;23&quot; inkscape:window-x=&quot;0&quot; inkscape:cy=&quot;52.761824&quot; inkscape:cx=&quot;59.782559&quot; inkscape:zoom=&quot;9.0501041&quot; showgrid=&quot;false&quot; id=&quot;namedview1018&quot; inkscape:window-height=&quot;1075&quot; inkscape:window-width=&quot;1792&quot; inkscape:pageshadow=&quot;2&quot; inkscape:pageopacity=&quot;0&quot; guidetolerance=&quot;10&quot; gridtolerance=&quot;10&quot; objecttolerance=&quot;10&quot; borderopacity=&quot;1&quot; inkscape:document-rotation=&quot;0&quot; bordercolor=&quot;#666666&quot; pagecolor=&quot;#ffffff&quot; /&gt;&lt;g id=&quot;g1015&quot;&gt;&lt;path class=&quot;bar&quot; id=&quot;path1013&quot; d=&quot;M12.14,0H32.8h29.43h28.8h19.71c3.34,0,6.38,1.37,8.58,3.56c2.2,2.2,3.56,5.24,3.56,8.58v7.13v57.25v7.09 c0,3.34-1.37,6.38-3.56,8.58c-2.2,2.2-5.24,3.56-8.58,3.56h-19.2c-0.16,0.03-0.33,0.04-0.51,0.04c-0.17,0-0.34-0.01-0.51-0.04 H62.74c-0.16,0.03-0.33,0.04-0.51,0.04c-0.17,0-0.34-0.01-0.51-0.04H33.31c-0.16,0.03-0.33,0.04-0.51,0.04 c-0.17,0-0.34-0.01-0.51-0.04H12.14c-3.34,0-6.38-1.37-8.58-3.56S0,86.95,0,83.61v-7.09V19.27v-7.13C0,8.8,1.37,5.76,3.56,3.56 C5.76,1.37,8.8,0,12.14,0L12.14,0z M55.19,31.24l20.53,14.32c0.32,0.2,0.61,0.48,0.84,0.81c0.92,1.33,0.58,3.14-0.74,4.06 L55.37,64.57c-0.5,0.41-1.15,0.66-1.85,0.66c-1.62,0-2.93-1.31-2.93-2.93V33.63h0.01c0-0.58,0.17-1.16,0.52-1.67 C52.05,30.64,53.87,30.32,55.19,31.24L55.19,31.24z M93.95,79.45V89.9h16.78c1.73,0,3.3-0.71,4.44-1.85 c1.14-1.14,1.85-2.71,1.85-4.44v-4.16H93.95L93.95,79.45z M88.1,89.9V79.45H65.16V89.9H88.1L88.1,89.9z M59.31,89.9V79.45H35.73 V89.9H59.31L59.31,89.9z M29.87,89.9V79.45H5.85v4.16c0,1.73,0.71,3.3,1.85,4.44c1.14,1.14,2.71,1.85,4.44,1.85H29.87L29.87,89.9z M5.85,73.6H32.8h29.43h28.8h26V22.2h-26h-28.8H32.8H5.85V73.6L5.85,73.6z M88.1,16.35V5.85H65.16v10.49H88.1L88.1,16.35z M93.95,5.85v10.49h23.07v-4.2c0-1.73-0.71-3.3-1.85-4.44c-1.14-1.14-2.71-1.85-4.44-1.85H93.95L93.95,5.85z M59.31,16.35V5.85 H35.73v10.49H59.31L59.31,16.35z M29.87,16.35V5.85H12.14c-1.73,0-3.3,0.71-4.44,1.85c-1.14,1.14-1.85,2.71-1.85,4.44v4.2H29.87 L29.87,16.35z&quot; /&gt;&lt;/g&gt;&lt;/svg&gt;

 
&lt;/div&gt;

&lt;p&gt;And it did not happen overnight. The moment first digital drum machine, specifically, &lt;a href=&quot;https://en.wikipedia.org/wiki/Linn_LM-1&quot;&gt;Linn LM-1 Drum Computer&lt;/a&gt; hit the market in 1980 at stunning launch price of $4,995, there were already producers, who did not want all the fuss with miking up a real drum kit. So, they just asked the drummer of the band to program-in their parts into Linn. Later, as the 
MIDI standard became more and more established among studio equipment manufactures, many of them contemplatingly offering a new kind of “no humans needed” approach to music recording.&lt;/p&gt;

&lt;!-- readmore --&gt;
&lt;p&gt;Working with drums samples certainly has a number of technical advantages with the mass-produced music context. This term alone could invoke the sense of repulsion among the readers, so I’d better stick with something more neutral, like mass-produced audio-media (MPAM), for example. So, having the drums programmed perfectly aligned, means that we have no need to do any pocketing”. Which means basically, manually moving aroud the bits of digitallized recorded performances, until they would ideally match the grid, introduced by the song’s tempo map. Pocketing itself is considered “ethically questionable” by many producers and music enthusiasts in general. However, having everything on the grid makes further editing and cueing much easier. Why would we need that much editing? Why not just comp a bunch of takes that are good enough? Well, for variaous reasons, which analysis is way beyond my expertise, putting that muchtime and effort into rehearsals and recording is just not commercially viable anymore. We talking about MPAM after all. Besides those “ethically questinable” practices serving as crutch for the next tone+deaf celebrity, there are just down to earch practical aspects of everyday audio editing. Need a shorter track version for advertising? We got you. Need a longer (strip) club version of the same track. We got you.&lt;/p&gt;

&lt;p&gt;Wikipedia, also, &lt;a href=&quot;https://en.wikipedia.org/wiki/Drum_machine&quot;&gt;states&lt;/a&gt;, that drum machines developed out of a need to create drum beats when a drum kit was not available. Increasingly, drum machines and drum programming are used by major record labels to undercut the costly expense of studio drummers.&lt;/p&gt;

&lt;p&gt;Drums samples over live drum recording or on their own, give music producers a lot of flexibility, You now can process each piece in literal isolation, reducing impact of mic bleed. You have a lot more options dealing with inconsistent hits from real drummer that way. Nobody is now forced to make decsions about drum sound once and for all, choice of drum-piece, microphones and preamps.
Downside of that? Sampled drums sound kinda dull, especially if they are over processed, unless you’re a true genius at sampling and programming them, of course (yes, Mr. Patrick, Iäm looking at you).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But aaaanyway…&lt;/em&gt;
The other day I was watching Moby’s vlog (I can’t believe I’m typing it, but that’s world we live in). So, there our modest electronic music producer was breaking down hit process for one of his track. And he showed something, that I’ve later labeled “sample replacement backwards”. Why backwards? Because he  programmed the electronic drums &lt;em&gt;first&lt;/em&gt;, and then overdubbed them with the real drums!
That way the programmed drum loop gained depth, variety and micro-shuffles.
So, instead of sucking out the life from the real drum recording, we can also try to add life to programmed drums.
This could be complemented with how Steve Albini described his feelings towards the drum machines. In his words, drums machines could be treated as “found objects” or “kitsch objects” repurposed for making music. There are ways of you using them, that you just can never get out of the human drumming, but they are never meant to be a replacement a band’s rythm section in his process.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jan 2021 22:51:58 +0200</pubDate>
        <link>/2021/Moby_Drums_and_Samples/</link>
        <guid isPermaLink="true">/2021/Moby_Drums_and_Samples/</guid>
        
        
      </item>
    
  </channel>
</rss>
